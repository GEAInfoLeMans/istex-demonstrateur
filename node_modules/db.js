var Engine = require('tingodb')();
var collections =[];
var database =new Engine.Db('db', {});
var logger=require("logger");
var log="db.js";
module.exports = {
	engine : Engine,
	db : database,
	collection_list : collections,
	populate : function() {
		//Exemple about words
		/*collection = database.collection("words");
		collection.remove({});
		collections.push("words");
		collection.insert([{word:'the', frequency : 10}, {word:'a', frequency : 8}, {word:'believe', frequency : 5, cluster : [1,2]}, {word:'prediction', frequency : 2}, {word:'feeling', frequency : 4}, {word:'then', frequency : 6}]);
		*/
		//For Diachrony-------------------------------------------------------------------------------------
		//Contains expe details such as period number*************************
		collection = database.collection("experiment");
		collections.push("experiment");
		//Contains sclu files*************************************************
		collection = database.collection("clusterDesc");
		collections.push("clusterDesc");
		this.ensureIndex("clusterDesc", "database");
		this.ensureIndex("clusterDesc", "period");
		this.ensureIndex("clusterDesc", "cluster");
		//Contains dcsl files*************************************************
		collection = database.collection("clusterFeatures");
		collections.push("clusterFeatures");
		this.ensureIndex("clusterFeatures", "database");
		this.ensureIndex("clusterDesc", "period");
		this.ensureIndex("clusterDesc", "cluster");
		//Contains json diachrony files files*************************************************
		collection = database.collection("diachrony");
		collections.push("diachrony");
		this.ensureIndex("diachrony", "database");
		this.ensureIndex("clusterDesc", "srcPeriod");
		this.ensureIndex("clusterDesc", "targetPeriod");
		//Contains arff files*************************************************
		collection = database.collection("indexation");
		collections.push("indexation");
		this.ensureIndex("indexation", "database");
		//blablabla
		collection = database.collection("mapreduce");
		collections.push("mapreduce");
		this.ensureIndex("mapreduce", "value.database");

	},
	findNoDb : function(collection) {
		return database.collection(collection).find({});
	},
	find : function(collection, currentDb) {
		if (collection == "mapreduce")
			return database.collection(collection).find({"value.database" : currentDb});
		else
			return database.collection(collection).find({"database" : currentDb});
	},
	/*findWhere : function() {
		where=Object();
		where.cluster ="1";
		where.period="2";
		var res=database.collection("clusterFeatures").find(where);
		res.each(function(err,item) {
			logger.debug(item);
		});
	},*/
	findWhere : function(collection, where, currentDb) {
		where.database=currentDb;
		var res=database.collection(collection).find(where);
		return res;
	},
	mapReduce : function (collection, map, reduce, var_scope) {
		console.log("ici");
		database.collection(collection).mapReduce(map, reduce, {scope : var_scope, out : {replace : "mapreduce"}}, function (err, items) {
			console.log("Mapreduce :" + err);
			console.log("Mapreduce :" +items);
			return true;
		});
	},
	insert : function(collection, value, currentDb) {
		collection=database.collection(collection);
		value.database=currentDb;
		collection.insert(value);

	},
	remove : function(collection, values) {
		database.collection(collection).remove(values);
	},
	//agregate not supported by TingoDB
	//Still, it would be supported if using MongoDB, and in further versions of TingoDB
	aggregate : function (collection, aggregat) {
		return database.collection(collection).aggregate([{ "$group" : {  aggregat	}	}]	);
	},
	clear : function(collectionName) {
		collection=database.collection(collectionName);
		collection.remove({});
	},
	clearWhere : function(collectionName, where) {
		collection=database.collection(collectionName);
		collection.remove(where);
	},
	clearAll : function() {
		for (i in collections) {
			this.clear(collections[i]);
		}
	},
	clearAllWhere : function(where) {
		for (i in collections) {
			this.clearWhere(collections[i], where);
		}
	},
	ensureIndex : function(collection, champ) {
		collection=database.collection(collection);
		collection.ensureIndex(champ);
	} 
};
