var d3 = require('d3'), 
jsdom = require('jsdom'),
logger=require('logger'),
controller =require('controller')
dataviz='<div id="dataviz-container"></div>';

//---------------------/todo---------------------------------------------------
//---------------------/todo---------------------------------------------------
//---------------------/todo---------------------------------------------------

module.exports={
	chart : function(data_marimekko,var_width,var_height,var_margin,res) {
			jsdom.env(
				dataviz,
				function(errors, window) {
					var width = var_width,
					    height = var_height,
					    margin = var_margin;

					var x = d3.scale.linear()
					    .range([0, width - 3 * margin]);

					var y = d3.scale.linear()
					    .range([0, height - 2 * margin]);

					var z = d3.scale.category10();

					var n = d3.format(",d"),
					    p = d3.format("%");
					var el = window.document.querySelector('#dataviz-container');

					var svg = d3.select(el).append("svg")
					    .attr("width", width)
					    .attr("height", height)
					  .append("g")
					    .attr("transform", "translate(" + 2 * margin + "," + margin + ")");

					data=data_marimekko;

					var offset = 0;

					// Nest values by segment. We assume each segment+market is unique.
					var segments = d3.nest()
					  .key(function(d) { return d.cluster; })
					  .entries(data);

					// Compute the total sum, the per-segment sum, and the per-market offset.
					// You can use reduce rather than reduceRight to reverse the ordering.
					// We also record a reference to the parent segment for each market.
					var sum = segments.reduce(function(v, p) {
					return (p.offset = v) + (p.sum = p.values.reduceRight(function(v, d) {
					  d.parent = p;
					  return (d.offset = v) + d.value;
					}, 0));
					}, 0);

					// Add x-axis ticks.
					var xtick = svg.selectAll(".x") // .x can be replaced by blbl, it doesn't matter because no ".x" nodes exist
					  .data(x.ticks(10)) //Number of ticks, 
					.enter().append("g") // enter allows to create nodes "g" for each data 
					  .attr("class", "x") // nodes g will be of class x
					  .attr("transform", function(d) { return "translate(" + x(d) + "," + y(1) + ")"; }); //y(1) ?

					//Tick lines
					xtick.append("line")
					  .attr("y2", 5)
					  .style("stroke", "#000");

					xtick.append("text")
					  .attr("y", 8)
					  .attr("text-anchor", "middle")
					  .attr("dy", ".71em")
					  .attr("font-size", "14px")
					  .text(p);

					// Add y-axis ticks.
					var ytick = svg.selectAll(".y")
					  .data(y.ticks(10))
					.enter().append("g")
					  .attr("class", "y")
					  .attr("transform", function(d) { return "translate(0," + y(1 - d) + ")"; });

					ytick.append("line")
					  .attr("x1", -5)
					  .style("stroke", "#000");

					ytick.append("text")
					  .attr("x", -8)
					  .attr("text-anchor", "end")
					  .attr("dy", ".35em")
					  .attr("font-size", "14px")
					  .text(p);

					// Add a group for each segment.
					var segments = svg.selectAll(".cluster")
					  .data(segments)
					.enter().append("g")
					  .attr("class", "cluster")
					  .attr("xlink:title", function(d) { return d.key; })
					  .attr("transform", function(d) { return "translate(" + x(d.offset / sum) + ")"; });

					// Add a rect for each market.
					var markets = segments.selectAll(".feature")
					  .data(function(d) { return d.values; })
					.enter().append("g").attr("class", "feature-desc")

				    

				    markets.append("rect")
				      .attr("y", function(d) { return y(d.offset / d.parent.sum); })
				      .attr("height", function(d) { return y(d.value / d.parent.sum); })
				      .attr("width", function(d) { return x(d.parent.sum / sum); })
				      .style("fill", function(d) { return z(d.feature)+";stroke-width:1px;stroke:rgb(0,0,0);fill-opacity: 0.3;" });

				    segments.selectAll(".feature-desc").append("text").attr("class", "text-desc")
				    	//.attr("font-size", "12px")
				    	.attr("y", function(d) { console.log(d); return y(d.offset / d.parent.sum) + 20; })
				    	.attr("x", function(d) { return d.parent.sum / sum + 10; })
				    	.text(function(d) { return d.feature });


				var svgsrc = window.document.querySelector('#dataviz-container').innerHTML;
				controller.marimekko(res, svgsrc);
			}
			);
	}
	
}