function truncate(str, maxLength, suffix) {
	if(str.length > maxLength) {
		str = str.substring(0, maxLength + 1); 
		str = str.substring(0, Math.min(str.length, str.lastIndexOf(" ")));
		str = str + suffix;
	}
	return str;
}

function mouseover(p) {
	var g = d3.select(this).node().parentNode;
	d3.select(g).selectAll("circle").style("display","none");
	d3.select(g).selectAll("text.value").style("display","block");
}

function mouseout(p) {
	var g = d3.select(this).node().parentNode;
	d3.select(g).selectAll("circle").style("display","block");
	d3.select(g).selectAll("text.value").style("display","none");
}

var d3 = require('d3'), 
jsdom = require('jsdom'),
logger=require('logger'),
controller =require('controller')
dataviz='<div id="dataviz-container"></div>';

//---------------------/timeline---------------------------------------------------
//---------------------/timeline---------------------------------------------------
//---------------------/timeline---------------------------------------------------

module.exports={
	//800, 650, 1970, 2013, 20
	chart : function(var_data, periods, var_width, var_height, var_max, var_margin, res) {
		jsdom.env(
				dataviz,
				function(errors, window) {
					var margin = {top: var_margin, right: var_margin*10, bottom: var_margin, left: var_margin*2},
						width = var_width,
						height = var_height;

					var c = d3.scale.category10();

					var numPeriod=periods.length;

					function truncator(numToTruncate, intDecimalPlaces) {    
					    var numPower = Math.pow(10, intDecimalPlaces); // "numPowerConverter" might be better
					    return ~~(numToTruncate * numPower)/numPower;
					}

					domain=[1,numPeriod];

					var xScale = d3.scale.linear().range([0, width]).domain(domain);
					//var formatYears = d3.format("0000");
					//xAxis.tickFormat(formatYears);

					var el = window.document.querySelector('#dataviz-container');

					var svg = d3.select(el).append("svg")
						//.attr("width", width + margin.left + margin.right)
						//.attr("height", height + margin.top + margin.bottom)
						.attr("preserveAspectRatio", "xMinYMin meet")
						 .attr("viewBox", "0 0 "+(width+margin.right)+" "+height)
						.style("margin-left", margin.left + "px")
						.append("g")
						.attr("transform", "translate(" + margin.left + "," + margin.top + ")");

					/*var xtick = svg.selectAll(".x-legend") // .x can be replaced by blbl, it doesn't matter because no ".x" nodes exist
					  .data(periods) //Number of ticks, 
					.enter().append("g") // enter allows to create nodes "g" for each data 
					  .attr("class", "x-legend") // nodes g will be of class x
					  .attr("transform", function(d,i) { 
					  	var enPlus=30;
					  	if ((i+ 1) == numPeriod)
					  		enPlus=-30;
					  	return "translate(" + ( i*width* (numPeriod -1) + enPlus) +","+0+")"; 
					  }); //y(1) ?

					xtick.append("text")
					  .attr("text-anchor", "middle")
					  .text(function(d,i) {
					  		return "P"+d;
			           });*/

					data=var_data;
					for (var j = 0; j < data.length; j++) {

						var space = j*100;

						var g = svg.append("g").attr("class","journal");

						var circles = g.selectAll("circle")
							.data(data[j]['frequency'])
							.enter()
							.append("circle");

						var rectangles = g.selectAll("rect")
							.data(data[j]['frequency'])
							.enter()
							.append("rect");

						var text = g.selectAll("text")
							.data(data[j]['frequency'])
							.enter()
							.append("text");

						var rScale = d3.scale.linear()
							.domain([0, var_max])
							.range([1, 40]);

						rectangles
							.attr("y", space+22)
							.attr("width", width+180)
							.attr("height", 70)
							.attr("class", "word")
							.style("fill-opacity","0.1")
							.style("fill", function(d) { return c(j); });


						circles
							.attr("cx", function(d, i) { 
								var taille=30;
								if (d[0] == ("P"+numPeriod) ) {
									taille=-30;
								}
								return xScale(d[0].substring(1,2)) + taille; 
							})
							.attr("cy", space+55)
							.attr("r", function(d) { return rScale(Math.round(d[1])); })
							.style("fill", function(d) { return c(j); });

						text
							.attr("y", space+65)
							.attr("x",function(d, i) { 
								var taille=22;
								if (d[0] == ("P"+numPeriod) ) {
									taille=-40;
								}
								return xScale(d[0].substring(1,2))+taille; 
							})
							.attr("class","value")
							.style("font-size", "14px")
							.text(function(d){ return truncator(d[1],2); })
							.style("fill", function(d) { return c(j); })
							.style("display","none");

						g.append("text")
							.attr("y", space+62)
							.attr("x",width+70)
							.style("font-size", "14px")
							.attr("class","label")
							.text(truncate(data[j]['name'],50,"..."))
							.style("fill", function(d) { return c(j); })
							.on("mouseover", mouseover)
							.on("mouseout", mouseout);
					}
					var svgsrc = window.document.querySelector('#dataviz-container').innerHTML;
						controller.timeline(res, svgsrc);
			}
		)
	}
}


