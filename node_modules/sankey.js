var d3 = require('d3'), 
d3_sankey=require('d3-sankey'),
jsdom = require('jsdom'),
logger=require('logger'),
controller =require('controller'),
dataviz='<div id="dataviz-container"></div>';

//---------------------/todo---------------------------------------------------
//---------------------/todo---------------------------------------------------
//---------------------/todo---------------------------------------------------

module.exports={
	chart : function(objectResult, data,var_width,var_height,var_margin,res) {
			jsdom.env(
				dataviz,
				function(errors, window) {
					var margin = {top: 20, right: 10, bottom: 20, left: 10},
					    width = 960 - margin.left - margin.right,
					    height = 800 - margin.top - margin.bottom;

					var formatNumber = d3.format(",.0f"),
					    format = function(d) { return formatNumber(d) + " TWh"; },
					    color = d3.scale.category10();

					var el = window.document.querySelector('#dataviz-container');
					var svg = d3.select(el).append("svg")
					    .attr("width", width + margin.left + margin.right)
					    .attr("height", height + margin.top + margin.bottom)
					  .append("g")
					    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

					var sankey = d3_sankey.sankey()
					    .nodeWidth(15)
					    .nodePadding(10)
					    .size([width, height]);

					var path = sankey.link();

					energy=data;

					  sankey
					      .nodes(energy.nodes)
					      .links(energy.links)
					      .layout(32);


					  var link = svg.append("g").selectAll(".link")
					      .data(energy.links)
					    .enter().append("path")
					      .attr("class", "link")
					      .attr("d", path)
					      .style("stroke-width", function(d) { return Math.max(1, d.dy); })
					      .sort(function(a, b) { return b.dy - a.dy; });

					  link.append("title")
					      .text(function(d) { var txt=""; for (i in d.kernel) txt+=d.kernel[i]+"\n"; return d.source.name + " â†’ " + d.target.name + "\nMatching probability :" +d.value+"\n"+txt; });

					  var node = svg.append("g").selectAll(".node")
					      .data(energy.nodes)
					    .enter().append("g")
					      .attr("class", "node")
					      .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
					   /* .call(d3.behavior.drag()
					      .origin(function(d) { return d; })
					      .on("dragstart", function() { this.parentNode.appendChild(this); }));*/

					  node.append("rect")
					      .attr("height", function(d) { return d.dy; })
					      .attr("width", sankey.nodeWidth())
					      .style("fill", function(d) { return d.color = color(parseInt(d.period)); })
					      .style("stroke", function(d) { return d3.rgb(d.color).darker(2); })
					    .append("title")
					      .text(function(d) { var text="\n"; for (i in d.features) text+=d.features[i]+"\n";return d.name + text;  });

					  node.append("text")
					      .attr("x", -6)
					      .attr("y", function(d) { return d.dy / 2; })
					      .attr("dy", ".35em")
					      .attr("text-anchor", "end")
					      .attr("transform", null)
					      .text(function(d) {   return d.name + "-" + d.period; })
					    .filter(function(d) { return d.x < width / 2; })
					      .attr("x", 6 + sankey.nodeWidth())
					      .attr("text-anchor", "start");

					/*  function dragmove(d) {
					    d3.select(this).attr("transform", "translate(" + d.x + "," + (d.y = Math.max(0, Math.min(height - d.dy, d3.event.y))) + ")");
					    sankey.relayout();
					    link.attr("d", path);
					  }*/


				objectResult.svgsrc = window.document.querySelector('#dataviz-container').innerHTML;
				controller.sankey(res, objectResult);
			}
			);
	}
	
}