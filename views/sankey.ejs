
			<div class="row">
	            <div class="col-lg-12">
	                <h1 class="page-header"> Diachronic clustering</h1>
	            </div>
	        </div>
	        <div class="row">
		        <div class="col-lg-8">
	                    <div class="panel panel-default">
	                        <div class="panel-heading">
	                            <i class="fa fa-bar-chart-o fa-fw"></i> Bipartite diachronic graph
	                            <% if (("psrc" in objectResult) && ("ptgt" in objectResult)) { %>
	                            	: Periods <%= objectResult.psrc %> and <%= objectResult.ptgt %>
	                            <% } %> 


	                            <div class="pull-right">
	                                <div class="btn-group">
	                                    <button type="button" class="btn btn-default btn-xs dropdown-toggle" data-toggle="dropdown">
	                                        Select periods
	                                        <span class="caret"></span>
	                                    </button>
	                                    <ul class="dropdown-menu pull-right" role="menu">
	                                        <% for (var i=1; i <= objectResult.experiment; i++ ) {%>
	                                        	<% for (var j=i+1; j <= objectResult.experiment; j++ ) {%>
                                            		<li><a href="/diachronie?src=<%= i%>&tgt=<%= j%>">Periods <%= i%>-<%= j%></a></li>
                                            	<% }%>
                                        	<% }%>
	                                    </ul>
	                                </div>
	                            </div>
	                        </div>
	                        		<%- objectResult.svgsrc %>
	                        <!-- /.panel-heading -->
	                        <div class="panel-body">
	                            <div id="morris-area-chart"></div>
	                        </div>
	                        <!-- /.panel-body -->
	                    </div>
	                    <div class="panel panel-yellow">
	                    <div class="panel-heading">
	                        <div class="row">
	                            <div class="col-xs-3">
	                                <i class="fa fa-shopping-cart fa-5x">Matching information</i>
	                            </div>
	                            <div class="col-xs-9 text-right">
	                            </div>
	                        </div>
	                    </div>
	                    <p id='matchingp'> </p>
	                    <a href="#">
	                        <div class="panel-footer">
	                            <span class="pull-left">Selected link information</span>
	                            <span class="pull-right"><i class="fa fa-arrow-circle-right"></i></span>
	                            <div class="clearfix"></div>
	                        </div>
	                    </a>
	                </div>
                </div>

                
            </div>

	<script>

var margin = {top: 1, right: 1, bottom: 6, left: 1},
    width = 960 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

var formatNumber = d3.format(",.0f"),
    format = function(d) { return formatNumber(d) + " TWh"; },
    color = d3.scale.category20();

var svg = d3.select("#chart").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var sankey = d3.sankey()
    .nodeWidth(15)
    .nodePadding(10)
    .size([width, height]);

var path = sankey.link();

energy=<% objectResult.energy %>;

  sankey
      .nodes(energy.nodes)
      .links(energy.links)
      .layout(32);

  var link = svg.append("g").selectAll(".link")
      .data(energy.links)
    .enter().append("path")
      .attr("class", "link")
      .attr("d", path)
      .style("stroke-width", function(d) { return Math.max(1, d.dy); })
      .sort(function(a, b) { return b.dy - a.dy; });

  link.append("title")
      .text(function(d) { return d.source.name + " â†’ " + d.target.name + "\n" + format(d.value); });

  var node = svg.append("g").selectAll(".node")
      .data(energy.nodes)
    .enter().append("g")
      .attr("class", "node")
      .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; })
    .call(d3.behavior.drag()
      .origin(function(d) { return d; })
      .on("dragstart", function() { this.parentNode.appendChild(this); })
      .on("drag", dragmove));

  node.append("rect")
      .attr("height", function(d) { return d.dy; })
      .attr("width", sankey.nodeWidth())
      .style("fill", function(d) { return d.color = color(d.name.replace(/ .*/, "")); })
      .style("stroke", function(d) { return d3.rgb(d.color).darker(2); })
    .append("title")
      .text(function(d) { return d.name + "\n" + format(d.value); });

  node.append("text")
      .attr("x", -6)
      .attr("y", function(d) { return d.dy / 2; })
      .attr("dy", ".35em")
      .attr("text-anchor", "end")
      .attr("transform", null)
      .text(function(d) { return d.name; })
    .filter(function(d) { return d.x < width / 2; })
      .attr("x", 6 + sankey.nodeWidth())
      .attr("text-anchor", "start");

  function dragmove(d) {
    d3.select(this).attr("transform", "translate(" + d.x + "," + (d.y = Math.max(0, Math.min(height - d.dy, d3.event.y))) + ")");
    sankey.relayout();
    link.attr("d", path);
  }

</script>